---
import KeyboardShortcutsMenu from "./svelte/KeyboardShortcutsMenu.svelte";
---

<footer class="no-print">
	<div>
		<button
			id="keyboard-indicator"
			class="keyboard-indicator"
			aria-label="Keyboard shortcuts menu"
		>
			<span class="key"></span>
			<span class="label">⌨️ Shortcuts</span>
		</button>
		<p>Designed & Built by Cello.</p>
		<p>Copyright 2024.</p>
	</div>
</footer>

<KeyboardShortcutsMenu client:only="svelte" />

<style>
	footer {
		display: flex;
		flex-direction: row;
		align-items: center;
		justify-content: space-around;
		opacity: 80%;
		background: var(--color-accent);
		bottom: 0;
		margin-top: 1rem;
		padding-block: 0.15rem;
		width: 100%;
	}
	.keyboard-indicator {
		display: flex;
		align-items: center;
		justify-content: center;
		background: none;
		border: none;
		border-radius: 4px;
		padding: 6px 8px;
		cursor: pointer;
		transition:
			background-color 0.2s ease,
			color 0.2s ease;
	}

	.keyboard-indicator:hover,
	.keyboard-indicator.active {
		border-color: var(--color-background);
		background: var(--color-text);
		color: var(--color-text);
	}

	.key {
		display: inline-block;
		background: var(--color-background);
		color: var(--color-accent);
		font-size: 0.8rem;
		font-weight: bold;
		padding: 2px 6px;
		border-radius: 3px;
		margin: 0 2px;
		box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
	}
	div {
		display: flex;
		flex-direction: row;
		align-items: center;
		text-align: center;
	}
	.label {
		font-family: GeistSans, sans-serif;
		font-size: 0.9rem;
		font-weight: 700;
		color: var(--color-background);
		/* padding: 2px 6px; */
		border-radius: 3px;
		margin: 0 2px;
	}
	p {
		color: var(--color-background);
		line-height: 1.5;
		/* margin-bottom: 0.5rem; */
		font-weight: 700;
		font-size: 0.9rem;
	}

	@media (max-width: 768px) {
		footer {
			padding: 0.5rem;
		}
		div {
			flex-direction: column;
			align-items: center;
			gap: 0.5rem;
		}
		.keyboard-indicator {
			padding: 8px 12px;
			margin-bottom: 0.5rem;
		}
		.key,
		.label {
			font-size: 1rem;
		}
		p {
			margin-bottom: 0.25rem;
			font-size: 0.8rem;
		}
	}

	@media (max-width: 480px) {
		.keyboard-indicator {
			width: 100%;
			justify-content: center;
		}
	}
</style>

<script>
	// Define the custom event interface
	interface MenuVisibilityChangedEvent extends CustomEvent {
		detail: { isVisible: boolean };
	}

	// Extend the WindowEventMap to include our custom event
	declare global {
		interface WindowEventMap {
			menuVisibilityChanged: MenuVisibilityChangedEvent;
		}
	}

	const keyboardIndicator = document.getElementById("keyboard-indicator");
	const keySpan = keyboardIndicator?.querySelector(".key");

	function detectOS() {
		// Note: This method of OS detection is not foolproof and may not work in all cases.
		// For production use, consider using a more robust solution or feature detection.
		const userAgent = navigator.userAgent.toLowerCase();
		if (userAgent.includes("mac")) return "mac";
		if (userAgent.includes("win")) return "windows";
		if (userAgent.includes("linux")) return "linux";
		return "other";
	}

	const isMac = detectOS() === "mac";

	if (keyboardIndicator && keySpan) {
		keySpan.textContent = isMac ? "⌘ + K" : "Ctrl + K";

		keyboardIndicator.addEventListener("click", () => {
			window.dispatchEvent(
				new CustomEvent("toggleKeyboardMenu"),
			);
		});
	}

	// Now TypeScript will recognize our custom event
	window.addEventListener("menuVisibilityChanged", (event) => {
		if (event.detail.isVisible) {
			keyboardIndicator?.classList.add("active");
		} else {
			keyboardIndicator?.classList.remove("active");
		}
	});

	// Add a theme change listener
	const observer = new MutationObserver((mutations) => {
		mutations.forEach((mutation) => {
			if (
				mutation.type === "attributes" &&
				mutation.attributeName === "data-theme"
			) {
				// Theme has changed, ensure the button is not stuck in active state
				keyboardIndicator?.classList.remove("active");
			}
		});
	});

	observer.observe(document.documentElement, {
		attributes: true,
		attributeFilter: ["data-theme"],
	});
</script>
