---
import Layout from "@/layouts/blogLayout.astro";
import TestComponent from "@/components/svelte/TestComponent.svelte";
import "@/styles/colors.css";
import Sun from "@/icons/Sun.astro";
import KeyboardManager from "@/components/KeyboardManager.astro";
---
<Layout title=`Cello's Devlog - infinityCanvas`>
	<div class="content-wrapper">
		<header>
			<div class="container">
				<h1>infinityCanvas - illustrated reflections on code and design</h1>
				<div class="button-group">
					<a href="/" class="button-link">üè†</a>
					<button onclick="toggleTheme()"><Sun /></button>
					<button id="keyboard-shortcut-indicator" class="keyboard-shortcut-indicator" aria-label="Keyboard shortcuts menu">
						<span class="key"></span>
					</button>
				</div>
			</div>
		</header>
		<main class="hero">
			<h2 class="hero-title">Blog - COMING SOON</h2>
			<p>We're working hard to bring you amazing content. Stay tuned!</p>
			<!-- <TestComponent client:only="svelte" /> -->
		</main>
	</div>
</Layout>

<script>
	function setTheme(theme: string) {
		document.documentElement.setAttribute('data-theme', theme);
		localStorage.setItem('theme', theme);
		// Remove the dynamic setting of background-translucent
	}

	function toggleTheme() {
		const currentTheme = localStorage.getItem('theme') || 'dark';
		const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
		setTheme(newTheme);
	}

	// Set initial theme
	function initTheme() {
		const savedTheme = localStorage.getItem('theme') || 'dark';
		setTheme(savedTheme);
	}

	// Run initTheme on page load
	document.addEventListener('DOMContentLoaded', initTheme);

	// Keyboard shortcut indicator logic
	function detectOS() {
		const userAgent = navigator.userAgent.toLowerCase();
		if (userAgent.includes('mac')) return 'mac';
		if (userAgent.includes('win')) return 'windows';
		if (userAgent.includes('linux')) return 'linux';
		return 'other';
	}

	const isMac = detectOS() === 'mac';
	const keyboardShortcutIndicator = document.getElementById('keyboard-shortcut-indicator');
	const keySpan = keyboardShortcutIndicator?.querySelector('.key');

	if (keyboardShortcutIndicator && keySpan) {
		keySpan.textContent = isMac ? '‚åò + K' : 'Ctrl + K';

		keyboardShortcutIndicator.addEventListener('click', () => {
			window.dispatchEvent(new CustomEvent('toggleKeyboardMenu'));
		});
	}
	// Make toggleTheme available globally
	(window as any).toggleTheme = toggleTheme;
</script>

<style>
	.content-wrapper {
		display: flex;
		flex-direction: column;
		min-height: 100vh;
	}
	header {
		display: flex;
		color: var(--color-text);
		flex-direction: column;
		align-items: center;
		background: var(--color-background-translucent);
		padding: 1rem;
		border-bottom: 1px solid var(--color-text);
	}
	.container {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		width: 100%;
		max-width: 1200px;
		padding: 0 1rem;
	}
	.button-group {
		display: flex;
		gap: 0.5rem;
	}
	.button-link, button {
		background: var(--color-background);
		color: var(--color-text);
		display: inline-flex;
		align-items: center;
		justify-content: center;
		border: 1px solid var(--color-accent);
		padding: 2px;
		height: 32px;
		width: 32px;
		border-radius: 4px;
		transition: all 0.3s ease;
	}
	.button-link:hover, button:hover {
		background: var(--color-accent);
		border: 1px solid var(--color-background);
	}
	.keyboard-shortcut-indicator {
		width: auto;
		padding: 2px 4px; /* Reduced padding */
	}
	h1 {
		font-size: 1.2rem;
		margin: 0;
	}
	.hero {
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		text-align: center;
		padding: 2rem;
	}
	.hero-title {
		font-size: 2rem;
		margin-bottom: 1rem;
	}
	p {
		font-size: 1.2rem;
		color: var(--color-accent);
	}
	.key {
		font-size: 0.8rem;
		font-weight: bold;
		padding: 0 4px;
	}
	@media (max-width: 600px) {
		h1 {
			font-size: 1rem;
		}
		.hero-title {
			font-size: 1.5rem;
		}
		p {
			font-size: 1rem;
		}
	}
	@media (max-width: 768px) {
		.container {
			flex-direction: column;
			gap: 1rem;
		}
		h1 {
			text-align: center;
		}
	}
</style>